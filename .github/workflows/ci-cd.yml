name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: youracr.azurecr.io
  NAMESPACE: saas-docpay

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage.cobertura.xml
        fail_ci_if_error: false

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [apigateway, userservice, paymentservice, notificationservice, workflowservice]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RG }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
    
    - name: Create namespace if not exists
      run: |
        kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to staging
      run: |
        helm upgrade --install saas-docpay-staging ./k8s/helm/saas-docpay \
          --namespace staging \
          --set image.tag=${{ github.sha }} \
          --set environment="Staging" \
          --set ingress.hosts[0].host="staging-api.docpaysystem.com" \
          --set secrets.jwt.secretKey="${{ secrets.JWT_SECRET_KEY }}" \
          --set secrets.database.connectionString="${{ secrets.STAGING_DB_CONNECTION }}" \
          --set secrets.stripe.secretKey="${{ secrets.STRIPE_SECRET_KEY }}" \
          --set secrets.stripe.publishableKey="${{ secrets.STRIPE_PUBLISHABLE_KEY }}" \
          --set secrets.sendgrid.apiKey="${{ secrets.SENDGRID_API_KEY }}" \
          --set secrets.servicebus.connectionString="${{ secrets.SERVICEBUS_CONNECTION }}" \
          --wait --timeout=10m
    
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=saas-docpay -n staging --timeout=300s
        kubectl get pods -n staging

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: '1.28.0'
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RG }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
    
    - name: Create namespace if not exists
      run: |
        kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to production
      run: |
        helm upgrade --install saas-docpay ./k8s/helm/saas-docpay \
          --namespace production \
          --set image.tag=${{ github.sha }} \
          --set environment="Production" \
          --set ingress.hosts[0].host="api.docpaysystem.com" \
          --set secrets.jwt.secretKey="${{ secrets.JWT_SECRET_KEY }}" \
          --set secrets.database.connectionString="${{ secrets.PRODUCTION_DB_CONNECTION }}" \
          --set secrets.stripe.secretKey="${{ secrets.STRIPE_SECRET_KEY }}" \
          --set secrets.stripe.publishableKey="${{ secrets.STRIPE_PUBLISHABLE_KEY }}" \
          --set secrets.sendgrid.apiKey="${{ secrets.SENDGRID_API_KEY }}" \
          --set secrets.servicebus.connectionString="${{ secrets.SERVICEBUS_CONNECTION }}" \
          --wait --timeout=15m
    
    - name: Run health checks
      run: |
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=saas-docpay -n production --timeout=300s
        kubectl get pods -n production
    
    - name: Run smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 60
        # Health check
        curl -f https://api.docpaysystem.com/health || exit 1
        # API Gateway health
        curl -f https://api.docpaysystem.com/api/health || exit 1

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json tests/performance/load-test.js
      env:
        BASE_URL: https://staging-api.docpaysystem.com
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json
